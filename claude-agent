#!/bin/bash

# Claude Agent Container CLI Wrapper
# This script provides a convenient way to run Claude Code via the containerized environment

set -e

# Default configuration
IMAGE_NAME="${CLAUDE_AGENT_IMAGE:-claude-agent-image}"
CONTAINER_NAME="${CLAUDE_AGENT_NAME:-claude-cli-$(date +%s)}"
PODMAN_ARGS="${PODMAN_ARGS:-}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Help function
show_help() {
    cat << EOF
Claude Agent Container CLI Wrapper

USAGE:
    claude-agent [OPTIONS] [CLAUDE_ARGS...]

DESCRIPTION:
    Run Claude Code CLI in a containerized environment with full DevOps toolkit.
    This wrapper automatically mounts your Claude configuration and current directory.

OPTIONS:
    -h, --help              Show this help message
    -t, --terminal          Start terminal server instead of Claude CLI
    -i, --image IMAGE       Container image to use (default: claude-agent-image)
    -n, --name NAME         Container name (default: claude-cli-TIMESTAMP)
    --no-config            Don't mount Claude configuration directories
    --no-workdir           Don't mount current working directory
    --podman-args ARGS     Additional arguments to pass to podman

ENVIRONMENT VARIABLES:
    CLAUDE_AGENT_IMAGE     Default container image name
    CLAUDE_AGENT_NAME      Default container name prefix
    PODMAN_ARGS           Additional podman arguments

EXAMPLES:
    # Interactive Claude session
    claude-agent

    # Run Claude with a prompt
    claude-agent "analyze this codebase"

    # Start terminal server
    claude-agent --terminal

    # Use custom image
    claude-agent -i my-claude-image "help with terraform"

    # Run without mounting config
    claude-agent --no-config --help

MOUNTED DIRECTORIES:
    ~/.claude              Claude configuration directory
    ~/.claude.json         Claude configuration file
    \$(pwd)                 Current working directory (as working directory in container)

EOF
}

# Parse command line arguments
MOUNT_CONFIG=true
MOUNT_WORKDIR=true
START_TERMINAL=false
CLAUDE_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -t|--terminal)
            START_TERMINAL=true
            shift
            ;;
        -i|--image)
            IMAGE_NAME="$2"
            shift 2
            ;;
        -n|--name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        --no-config)
            MOUNT_CONFIG=false
            shift
            ;;
        --no-workdir)
            MOUNT_WORKDIR=false
            shift
            ;;
        --podman-args)
            PODMAN_ARGS="$2"
            shift 2
            ;;
        --)
            shift
            CLAUDE_ARGS+=("$@")
            break
            ;;
        -*)
            log_error "Unknown option: $1"
            echo "Use --help for usage information" >&2
            exit 1
            ;;
        *)
            CLAUDE_ARGS+=("$1")
            shift
            ;;
    esac
done

# Check if podman is available
if ! command -v podman &> /dev/null; then
    log_error "podman is required but not installed"
    exit 1
fi

# Build podman command
PODMAN_CMD=(podman run)

# Add basic flags
PODMAN_CMD+=(--rm)
PODMAN_CMD+=(--name "$CONTAINER_NAME")

# Mount configuration if requested
if [[ "$MOUNT_CONFIG" == true ]]; then
    if [[ -d "$HOME/.claude" ]]; then
        PODMAN_CMD+=(-v "$HOME/.claude:/home/agent/.claude")
        log_info "Mounted Claude config directory: $HOME/.claude"
    fi
    
    if [[ -f "$HOME/.claude.json" ]]; then
        PODMAN_CMD+=(-v "$HOME/.claude.json:/home/agent/.claude.json")
        log_info "Mounted Claude config file: $HOME/.claude.json"
    fi
fi

# Mount working directory if requested
if [[ "$MOUNT_WORKDIR" == true ]]; then
    PODMAN_CMD+=(-v "$PWD:$PWD")
    PODMAN_CMD+=(-w "$PWD")
    log_info "Mounted working directory: $PWD"
fi

# Add terminal flags for interactive mode
if [[ "$START_TERMINAL" == true ]]; then
    PODMAN_CMD+=(-p 7681:7681)
    PODMAN_CMD+=(-d)
    log_info "Starting terminal server on port 7681"
else
    PODMAN_CMD+=(-ti)
fi

# Add any additional podman arguments
if [[ -n "$PODMAN_ARGS" ]]; then
    # Split PODMAN_ARGS by spaces and add to command
    read -ra ARGS <<< "$PODMAN_ARGS"
    PODMAN_CMD+=("${ARGS[@]}")
fi

# Add image name
PODMAN_CMD+=("$IMAGE_NAME")

# Add command and arguments
if [[ "$START_TERMINAL" == true ]]; then
    # Terminal mode - use default entrypoint
    :
else
    # Claude CLI mode
    PODMAN_CMD+=(claude)
    if [[ ${#CLAUDE_ARGS[@]} -gt 0 ]]; then
        PODMAN_CMD+=("${CLAUDE_ARGS[@]}")
    fi
fi

# Execute the command
log_info "Executing: ${PODMAN_CMD[*]}"
exec "${PODMAN_CMD[@]}"